version: "3.8"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 5

  airflow-webserver:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      &airflow-env
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      # Listen on all interfaces so VS Code can bind-forward
      AIRFLOW__WEBSERVER__WEB_SERVER_HOST: "0.0.0.0"
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "8080"
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    volumes:
      - ..:/workspace              # Source code & DAGs
      - airflow_logs:/opt/airflow/logs
      - ~/.aws:/home/airflow/.aws:ro  # Optional: local AWS creds (read-only)
    command: >
      bash -c "scripts/init_airflow.sh && exec airflow webserver"

    ports:
      - "8080:8080"   # Airflow UI
    restart: unless-stopped

  airflow-scheduler:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    depends_on:
      airflow-webserver:
        condition: service_started
    environment:
      <<: *airflow-env
    volumes:
      - ..:/workspace
      - airflow_logs:/opt/airflow/logs
    command: ["airflow", "scheduler"]
    restart: unless-stopped

  airflow-flower:
    image: apache/airflow:2.9.0-python3.10
    depends_on:
      airflow-webserver:
        condition: service_started
    environment:
      <<: *airflow-env
    command: ["airflow", "celery", "flower"]
    ports:
      - "5555:5555"   # Flower UI
    restart: unless-stopped

volumes:
  postgres_data:
  airflow_logs: